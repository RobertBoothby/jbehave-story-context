/*
Copyright 2014 Robert Boothby

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
package storycontext;

/**
 * <p><A StoryContext is intended to store shared state while a story is being run. The state is typically generated,
 * stored and accessed by individual step methods on various steps classes./p>
 * <p>The keys used for storage are typically expected to be static constants on the step classes so any usage of shared
 * state is clearly visible.</p>
 * <p>The StoryContext is expected to implement a meaningful toString() method so that in the event of a failure the
 * {@link org.jbehave.core.reporters.StoryReporter} generated by
 * {@link storycontext.ContextualStoryReporterBuilder} can clearly report on the state of the context when an error
 * occurs. In addition it is recommended that any stored values have an useful toString() method so that it is easier
 * to debug the problem</p>
 * <p>&#169; 2014 Robert Boothby.</p>
 *
 * @author Robert Boothby.
 */
public interface StoryContext {

    /**
     * Store a value against a StoryContextKey of the right type for the key.
     * @param storyContextKey The StoryContextKey to store against.
     * @param value The value to store.
     * @param <T> The type of the value (and key) to be stored.
     * @return The previous value stored against this key or null if there is no previous value.
     */
    <T> T store(StoryContextKey<T> storyContextKey, T value);

    /**
     * Retrieve the value stored against a StoryContextKey.
     * @param storyContextKey The StoryContextKey to retrieve against.
     * @param <T> The type of the value (and key) to be retrieved.
     * @return The value stored against the key or null if no value has been stored.
     */
    <T> T retrieve(StoryContextKey<T> storyContextKey);

    /**
     * Completely clear all values held against the StoryContext.
     */
    void reset();
}
